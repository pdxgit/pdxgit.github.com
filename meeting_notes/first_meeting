use git 1.7.x:
- submodules suck less
- multi-cherry-pick
- sparse checkout
- git grep is now multi-threaded
- git-svn grocks svn merges (!!!)
- git stash corner cases fixed (???)
  - index item
- general gitweb improves
  - code hilite
- sugar for delete branch
  - git push origin :goner #old syntax to push "nothing"
  - git push origin --delete goner #new syntax more explicit
- new diff algorithm "patience"
  - explained: 
    - http://stackoverflow.com/questions/4045017/what-is-git-diff-patience-for
    - http://math.columbia.edu/~dejong/wordpress/?p=1539
- git merge –edit
  - allows for merge with altered commit msg
  - instead of merge --nocommit then commit with msg
- git submodules improved
  - meta data has been shifted from external dirs to the core .git dir so that git now knows where to find everything and do the right thing at the right time because of this
  - --recursive :  http://stackoverflow.com/questions/1535524/git-submodule-inside-of-a-submodule

[ quick QA ] 
- how to take an untracked project, but you have a dev and prod dir that should be branches
  - cd prod -> git init -> git add -> git ci -> git tag
  - git co -b dev -> del * -> cp -rv ../dev/* . -> git st -> git add -> git tag
- svn loaddirs ... how do you do something like this in git? 
  - same as above wipe out working copy, cp new files, st to check, add *, ci, tag

libgit2
- a magical world
- reimplementation git
  - like kid sister, not a fork or replacement, shares API
  - attempts to fix issues that are baked in to git 1.x for not being a lib 
  - portable, native win support
  - lighter footprint, better for embedded/mobile
    - direct func calls to repo, less overhead when compared to CLI toolkit
- History
  - backing by github
  - much development was done via GsoC
  - github has plans to use in prod though status is unknown at this time
- what can it do currently? 
  - open repos
  - look into repos
  - create commits, search commits
- what is not yet possible
  - no remote access thus push and pull are not yet working
- getting involved: 
  - repo: https://github.com/libgit2
  - #libgit2 on irc.freenode 
  - libgit2@librealist.com #mailinglist
- how to help
  - need test to be written
  - contact the team and see what else can be done to help

how to get involved with pdxgit? 
  - https://github.com/pdxgit
  - http://pdxgit.github.com/
  - http://pdxgit.com  (will fix soon) 
  - pdxgit@librelist.com #mailinglist
  - propose a meeting topic or give a talk

Collective Agency is awesome, support them it's cheap! (http://collectiveagency.co/)

[QA] 
- what about git-flow? (https://github.com/nvie/gitflow)
  - seems over engineered
    - why are there dev, release and hotfix branches
      - you can add them later if you ~really~ need them
  - it's overkill for 99% of general products 
    - work-flow is really based on the boxed software model 
    - if you just have a 'webapp' where current is always live then it's kinda bunk
  - git is an EXTREAMLY flexible tool so you can look at your flow and then mold the use of the tool to the team, no need to go the extra mile and force a new flow on a team just because of a tool. 
  - the good thing is that the git-flow command wraps up common patterns
    - but it does hide what's going on and so when something blows up then what ~really~ happened as it's all hidden
- alternate workflow ideas: 
  - http://schacon.github.com/git/gitworkflows.html


- read commit #1 from git://github.com/gitster/git.git it's enlightening
  - link to on github: https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290




